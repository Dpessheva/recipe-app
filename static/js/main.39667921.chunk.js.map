{"version":3,"sources":["components/RecipeDetails.js","components/Recepi.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["RecipeDetails","ingredients","map","ingredient","key","uuidv4","className","text","weigth","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecepies","setAlert","getData","a","Axios","get","result","data","more","hits","onSubmit","e","preventDefault","type","placeholder","autoComplete","onChange","input","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAgBeA,EAdO,SAAC,GACnB,OADqC,EAAjBC,YACDC,KAAI,SAAAC,GACnB,OACI,wBAAIC,IAAKC,cAAUC,UAAU,mBACzB,wBAAIA,UAAU,mBAAmBH,EAAWI,MAC5C,wBAAID,UAAU,qBAAd,UAA0CH,EAAWK,aCctDC,EAlBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACHC,oBAAS,GADN,mBACpBC,EADoB,KACdC,EADc,OAGgBH,EAAOA,OAA1CI,EAHmB,EAGnBA,MAAOC,EAHY,EAGZA,MAAOC,EAHK,EAGLA,IAAKf,EAHA,EAGAA,YAC3B,OACI,yBAAKK,UAAU,UACf,4BAAKQ,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,uBAAGK,KAAMH,EAAKI,OAAO,SACjBC,IAAI,uBADR,OAII,4BAAQC,QAAS,kBAAKT,GAASD,KAA/B,eACCA,GAAS,kBAAC,EAAD,CAAeX,YAAaA,MCNnCsB,EARD,SAAC,GAAc,IAAZC,EAAW,EAAXA,MACb,OACI,yBAAKlB,UAAU,SACX,4BAAKkB,KC2DFC,EAzDI,WAAO,IAAD,EACGd,mBAAS,IADZ,mBAChBe,EADgB,KACTC,EADS,OAEQhB,mBAAS,IAFjB,mBAEhBiB,EAFgB,KAEPC,EAFO,OAGGlB,mBAAS,IAHZ,mBAGhBa,EAHgB,KAGTM,EAHS,KAQjBd,EAAG,0CAAsCU,EAAtC,mBAHM,WAGN,oBAFO,oCAGVK,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVN,EADU,iCAESO,IAAMC,IAAIlB,GAFnB,WAENmB,EAFM,QAGAC,KAAKC,KAHL,yCAIHP,EAAS,6BAJN,OAMZD,EAAYM,EAAOC,KAAKE,MACxBR,EAAS,IACTH,EAAS,IARG,wBAUZG,EAAS,2BAVG,4CAAH,qDAyBb,OACE,yBAAKxB,UAAU,OACb,wBAAIgB,QAASS,GAAb,sBACA,0BAAMzB,UAAU,cAAciC,SAbjB,SAACC,GAChBA,EAAEC,iBACFV,MAYe,KAAVP,GAAgB,kBAAC,EAAD,CAAOA,MAAOA,IAC/B,2BACEkB,KAAK,OACLC,YAAY,cACZC,aAAa,MACbC,SAdS,SAACL,GACf,IAAMM,EAAQN,EAAEpB,OAAO2B,MACxBpB,EAASmB,IAaHC,MAAOrB,IAET,2BAAOgB,KAAK,SAASK,MAAM,YAE7B,yBAAKzC,UAAU,WACZsB,IAAY,IAAMA,EAAQ1B,KAAI,SAAAQ,GAAM,OACnC,kBAAC,EAAD,CAAQN,IAAKC,cAAUK,OAAQA,UC7CrBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39667921.chunk.js","sourcesContent":["import React from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'; \r\nconst RecipeDetails = ({ingredients}) => {\r\n    return ingredients.map(ingredient => {\r\n        return (\r\n            <ul key={uuidv4()} className=\"ingredient-list\">\r\n                <li className=\"ingredient-text\">{ingredient.text}</li>\r\n                <li className=\"ingredient-weight\">Weight-{ingredient.weigth}</li>\r\n\r\n            </ul>\r\n        )\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default RecipeDetails\r\n","import React, {useState} from 'react'\r\nimport RecipeDetails from './RecipeDetails';\r\n\r\nconst Recipe = ({ recipe }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const { label, image, url, ingredients } = recipe.recipe;\r\n    return (\r\n        <div className=\"recipe\">\r\n        <h2>{label}</h2>\r\n        <img src={image} alt={label} />\r\n        <a href={url} target=\"_blank\"\r\n            rel=\"noopener noreferrer\">\r\n            URL\r\n        </a>\r\n            <button onClick={()=> setShow(!show)}>Ingredients</button>\r\n           { show &&  <RecipeDetails ingredients={ingredients}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;\r\n","import React from 'react'\r\n\r\nconst Alert = ({ alert}) => {\r\n    return (\r\n        <div className=\"alert\">\r\n            <h3>{alert}</h3> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, {useState} from 'react'\r\nimport './App.css';\r\nimport Axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Recipe from './components/Recepi';\r\nimport Alert from './components/Alert';\r\n\r\nexport const App = () => {\r\n  const [query, setQuery] = useState('');\r\n  const [recipes, setRecepies] = useState([]);\r\n  const [alert, setAlert] = useState('');\r\n\r\n  const APP_ID = \"57c344a9\";\r\n  const APP_KEY = \"6df59ea51599f6fdb88aa07b2a727591\";\r\n\r\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\r\n  const getData = async () => {\r\n    if (query !== \"\") {\r\n      const result = await Axios.get(url);\r\n      if (!result.data.more) {\r\n        return setAlert(\"No food with such a name\")\r\n      } \r\n      setRecepies(result.data.hits);\r\n      setAlert('');\r\n      setQuery('');\r\n    } else {\r\n      setAlert(\"Please fill in the form\")\r\n    }\r\n   \r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    getData();\r\n  }\r\n\r\n  const onChange = (e) => {\r\n     const input = e.target.value;\r\n    setQuery(input);\r\n  }; \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 onClick={getData}>Food Searching App</h1>\r\n      <form className=\"search-form\" onSubmit={onSubmit}>\r\n        {alert !== \"\" && <Alert alert={alert}/>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search food\"\r\n          autoComplete=\"off\"\r\n          onChange={onChange}\r\n          value={query}\r\n        />\r\n        <input type=\"submit\" value=\"search\"/>\r\n      </form>\r\n      <div className=\"recipes\">\r\n        {recipes !== [] && recipes.map(recipe => \r\n          <Recipe key={uuidv4()} recipe={recipe}/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}